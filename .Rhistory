scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('MOG', 'All trees')) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = reorder(variable))) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("Plot") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('MOG', 'All trees')) +
theme_classic() +
theme(legend.title = element_blank())
MOGvsTPH$variable <- factor(MOGvsTPH$variable, levels=c("TPH", "MOGperha"))
MOGPHvsTPH$variable <- factor(MOGPHvsTPH$variable, levels=c("TPH", "MOGperha"))
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("Plot") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('MOG', 'All trees')) +
theme_classic() +
theme(legend.title = element_blank())
SFS4 <- read_excel("Data/sfs4 bible 2024.xlsx")
BTN4 <- read_excel("Data/btn4 revisit data 2024.xlsx")
BTN4dbh <- read_excel ("Data/btn4 access for C.xlsx")
SFF1 <- read_excel("Data/sff1 establishment data.xlsx")
SFF2 <- read_excel("Data/sff2 establishment 2024 data.xlsx")
SFF3 <- read_excel("Data/sff3 establishment data.xlsx")
SFF4 <- read_excel("Data/sff4 establishment data.xlsx")
SFF5 <- read_excel("Data/sff5 establishment data 2024.xlsx")
SFF6 <- read_excel("Data/sff6 establishment data.xlsx")
SFF8 <- read_excel("Data/sff8 establishment data.xlsx")
SFF9 <- read_excel("Data/sff9 establishment data.xlsx")
SFF10 <- read_excel("Data/sff10 initial 2024 data.xlsx")
names(SFF2)[5] <- paste("DBH")
SFS4$Tree_num = paste0('SFS4-', SFS4$Tree_num)
BTN4$Tree_num = paste0('BTN4-', BTN4$Tree_num)
SFF1$Tree_num = paste0('SFF1-', SFF1$Tree_num)
SFF2$Tree_num = paste0('SFF2-', SFF2$Tree_num)
SFF3$Tree_num = paste0('SFF3-', SFF3$Tree_num)
SFF4$Tree_num = paste0('SFF4-', SFF4$Tree_num)
SFF5$Tree_num = paste0('SFF5-', SFF5$Tree_num)
SFF6$Tree_num = paste0('SFF6-', SFF6$Tree_num)
SFF8$Tree_num = paste0('SFF8-', SFF8$Tree_num)
SFF9$Tree_num = paste0('SFF9-', SFF9$Tree_num)
SFF10$Tree_num = paste0('SFF10-', SFF10$Tree_num)
BTN4dbh$Tree_num <- BTN4dbh$TreeID
BTN4 <- left_join(BTN4, BTN4dbh, by = "Tree_num")
BTN4$Species <- BTN4$SpeciesID
BTN4$Notes<-BTN4$Notes.x
SFS4$PlotName <- "SFS4"
BTN4$PlotName <- "BTN4"
SFF1$PlotName <- "SFF1"
SFF2$PlotName <- "SFF2"
SFF3$PlotName <- "SFF3"
SFF4$PlotName <- "SFF4"
SFF5$PlotName <- "SFF5"
SFF6$PlotName <- "SFF6"
SFF8$PlotName <- "SFF8"
SFF9$PlotName <- "SFF9"
SFF10$PlotName <- "SFF10"
SFS4$TreatmentStatus <- "Treated"
BTN4$TreatmentStatus <- "Untreated"
SFF1$TreatmentStatus <- "Treated"
SFF2$TreatmentStatus <- "Untreated"
SFF3$TreatmentStatus <- "Untreated"
SFF4$TreatmentStatus <- "Untreated"
SFF5$TreatmentStatus <- "Treated"
SFF6$TreatmentStatus <- "Untreated"
SFF8$TreatmentStatus <- "Treated"
SFF9$TreatmentStatus <- "Untreated"
SFF10$TreatmentStatus <- "Treated"
SFS4$PlotSize <- 1
BTN4$PlotSize <- 1
SFF1$PlotSize <- 0.25
SFF2$PlotSize <- 1
SFF3$PlotSize <- 0.25
SFF4$PlotSize <- 0.25
SFF5$PlotSize <- 0.25
SFF6$PlotSize <- 0.25
SFF8$PlotSize <- 1
SFF9$PlotSize <- 0.25
SFF10$PlotSize <- 0.25
SFS4 <- SFS4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
BTN4 <- BTN4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF1 <- SFF1 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF2 <- SFF2 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF3 <- SFF3 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF4 <- SFF4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF5 <- SFF5 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG,  Notes)
SFF6 <- SFF6 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF8 <- SFF8 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF9 <- SFF9 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG,  Notes)
SFF10 <- SFF10 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFS4$Condition <- as.numeric(SFS4$Condition)
merged_plots <- bind_rows(SFS4, BTN4, SFF1, SFF2, SFF3, SFF4, SFF5, SFF6, SFF8, SFF9, SFF10)
merged_plots <- merged_plots %>%
mutate(MOG = case_when(OG == "Y" | DBH > 30 ~ "Y"))
merged_summary <- merged_plots %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(Tree_count = n(), meanDBH = mean(DBH, na.rm = TRUE))
merged_MOG <- merged_plots %>%
filter(MOG == "Y")%>%
group_by(PlotName, PlotSize, TreatmentStatus)%>%
summarize(MOG_count = n())
merged_MOG_live <- merged_plots %>%
filter(MOG == "Y" & Condition != 5 & Condition != 2) %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(MOG_live_count = n())
merged_OG <- merged_plots %>%
filter(OG == "Y") %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(OG_count = n())
merged_summary$MOG_count <- merged_MOG$MOG_count
merged_summary$MOG_live_count <- merged_MOG_live$MOG_live_count
merged_summary$OG_count <- merged_OG$OG_count
merged_summary$TPH <- merged_summary$Tree_count/merged_summary$PlotSize
est_data<-merged_summary
ggplot(merged_plots, aes(x=Species, fill = Species)) +
geom_bar(stat = "count", position = "fill" )+
#scale_fill_identity()+
scale_fill_manual(values = c("ABCO" = "#4EDFC7",
"ACGL" = "#C21E56",
"JUMO" = "#FFC0CB",
"JUSC" = "#95658B",
"PIED" = "#FFD700",
"PIPO" = "#2E8B57",
"PIST" = "#89CFF0",
"PRVI" = "#9F2B68",
"PSME" = "#5D3FD3",
"QUGA" = "#CC5500",
"QUUN" = "#E3963E",
"SASC" = "#AFE1AF",
"unknown"= "#808080" ,
"NA" = "#808080" ))+
facet_wrap(~PlotName)+
theme_minimal()+
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(merged_plots, aes(x=Species, fill = Species)) +
geom_bar(stat = "count")+
#scale_fill_identity()+
scale_fill_manual(values = c("ABCO" = "#4EDFC7",
"ACGL" = "#C21E56",
"JUMO" = "#FFC0CB",
"JUSC" = "#95658B",
"PIED" = "#FFD700",
"PIPO" = "#2E8B57",
"PIST" = "#89CFF0",
"PRVI" = "#9F2B68",
"PSME" = "#5D3FD3",
"QUGA" = "#CC5500",
"QUUN" = "#E3963E",
"SASC" = "#AFE1AF",
"unknown"= "#808080" ,
"NA" = "#808080" ))+
facet_wrap(~PlotName)+
theme_minimal()+
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(merged_plots, aes(x=Species, fill = Species)) +
geom_bar(stat = "count")+
#scale_fill_identity()+
scale_fill_manual(values = c("ABCO" = "#4EDFC7",
"ACGL" = "#C21E56",
"JUMO" = "#FFC0CB",
"JUSC" = "#95658B",
"PIED" = "#FFD700",
"PIPO" = "#2E8B57",
"PIST" = "#89CFF0",
"PRVI" = "#9F2B68",
"PSME" = "#5D3FD3",
"QUGA" = "#CC5500",
"QUUN" = "#E3963E",
"SASC" = "#AFE1AF",
"unknown"= "#808080" ,
"NA" = "#808080" ))+
facet_wrap(~PlotName)+
xlab("") +
theme_minimal()+
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
MOGPHvsTPH<- melt(est_data[,c('PlotName','MOGperha','TPH')],id.vars = 1)
names(SFF2)[5] <- paste("DBH")
#Add plot numbers to treeIDs
SFS4$Tree_num = paste0('SFS4-', SFS4$Tree_num)
BTN4$Tree_num = paste0('BTN4-', BTN4$Tree_num)
SFF1$Tree_num = paste0('SFF1-', SFF1$Tree_num)
SFF2$Tree_num = paste0('SFF2-', SFF2$Tree_num)
SFF3$Tree_num = paste0('SFF3-', SFF3$Tree_num)
SFF4$Tree_num = paste0('SFF4-', SFF4$Tree_num)
SFF5$Tree_num = paste0('SFF5-', SFF5$Tree_num)
SFF6$Tree_num = paste0('SFF6-', SFF6$Tree_num)
SFF8$Tree_num = paste0('SFF8-', SFF8$Tree_num)
SFF9$Tree_num = paste0('SFF9-', SFF9$Tree_num)
SFF10$Tree_num = paste0('SFF10-', SFF10$Tree_num)
#do a quick n dirty join of BTN4 DBH & Species files
BTN4dbh$Tree_num <- BTN4dbh$TreeID
BTN4 <- left_join(BTN4, BTN4dbh, by = "Tree_num")
BTN4$Species <- BTN4$SpeciesID
BTN4$Notes<-BTN4$Notes.x
#Add plot number to data
SFS4$PlotName <- "SFS4"
BTN4$PlotName <- "BTN4"
SFF1$PlotName <- "SFF1"
SFF2$PlotName <- "SFF2"
SFF3$PlotName <- "SFF3"
SFF4$PlotName <- "SFF4"
SFF5$PlotName <- "SFF5"
SFF6$PlotName <- "SFF6"
SFF8$PlotName <- "SFF8"
SFF9$PlotName <- "SFF9"
SFF10$PlotName <- "SFF10"
#Add treatment status
SFS4$TreatmentStatus <- "Treated"
BTN4$TreatmentStatus <- "Untreated"
SFF1$TreatmentStatus <- "Treated"
SFF2$TreatmentStatus <- "Untreated"
SFF3$TreatmentStatus <- "Untreated"
SFF4$TreatmentStatus <- "Untreated"
SFF5$TreatmentStatus <- "Treated"
SFF6$TreatmentStatus <- "Untreated"
SFF8$TreatmentStatus <- "Treated"
SFF9$TreatmentStatus <- "Untreated"
SFF10$TreatmentStatus <- "Treated"
#Add plot size
SFS4$PlotSize <- 1
BTN4$PlotSize <- 1
SFF1$PlotSize <- 0.25
SFF2$PlotSize <- 1
SFF3$PlotSize <- 0.25
SFF4$PlotSize <- 0.25
SFF5$PlotSize <- 0.25
SFF6$PlotSize <- 0.25
SFF8$PlotSize <- 1
SFF9$PlotSize <- 0.25
SFF10$PlotSize <- 0.25
#Select columns of interest (I'm begging someone to write a loop, this is so embarrasing)
SFS4 <- SFS4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
BTN4 <- BTN4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF1 <- SFF1 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF2 <- SFF2 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFS4 <- read_excel("Data/sfs4 bible 2024.xlsx")
BTN4 <- read_excel("Data/btn4 revisit data 2024.xlsx")
BTN4dbh <- read_excel ("Data/btn4 access for C.xlsx")
SFF1 <- read_excel("Data/sff1 establishment data.xlsx")
SFF2 <- read_excel("Data/sff2 establishment 2024 data.xlsx")
SFF3 <- read_excel("Data/sff3 establishment data.xlsx")
SFF4 <- read_excel("Data/sff4 establishment data.xlsx")
SFF5 <- read_excel("Data/sff5 establishment data 2024.xlsx")
SFF6 <- read_excel("Data/sff6 establishment data.xlsx")
SFF8 <- read_excel("Data/sff8 establishment data.xlsx")
SFF9 <- read_excel("Data/sff9 establishment data.xlsx")
SFF10 <- read_excel("Data/sff10 initial 2024 data.xlsx")
#Fix janky column name in SFF2
names(SFF2)[5] <- paste("DBH")
#Add plot numbers to treeIDs
SFS4$Tree_num = paste0('SFS4-', SFS4$Tree_num)
BTN4$Tree_num = paste0('BTN4-', BTN4$Tree_num)
SFF1$Tree_num = paste0('SFF1-', SFF1$Tree_num)
SFF2$Tree_num = paste0('SFF2-', SFF2$Tree_num)
SFF3$Tree_num = paste0('SFF3-', SFF3$Tree_num)
SFF4$Tree_num = paste0('SFF4-', SFF4$Tree_num)
SFF5$Tree_num = paste0('SFF5-', SFF5$Tree_num)
SFF6$Tree_num = paste0('SFF6-', SFF6$Tree_num)
SFF8$Tree_num = paste0('SFF8-', SFF8$Tree_num)
SFF9$Tree_num = paste0('SFF9-', SFF9$Tree_num)
SFF10$Tree_num = paste0('SFF10-', SFF10$Tree_num)
#do a quick n dirty join of BTN4 DBH & Species files
BTN4dbh$Tree_num <- BTN4dbh$TreeID
BTN4 <- left_join(BTN4, BTN4dbh, by = "Tree_num")
BTN4$Species <- BTN4$SpeciesID
BTN4$Notes<-BTN4$Notes.x
#Add plot number to data
SFS4$PlotName <- "SFS4"
BTN4$PlotName <- "BTN4"
SFF1$PlotName <- "SFF1"
SFF2$PlotName <- "SFF2"
SFF3$PlotName <- "SFF3"
SFF4$PlotName <- "SFF4"
SFF5$PlotName <- "SFF5"
SFF6$PlotName <- "SFF6"
SFF8$PlotName <- "SFF8"
SFF9$PlotName <- "SFF9"
SFF10$PlotName <- "SFF10"
#Add treatment status
SFS4$TreatmentStatus <- "Treated"
BTN4$TreatmentStatus <- "Untreated"
SFF1$TreatmentStatus <- "Treated"
SFF2$TreatmentStatus <- "Untreated"
SFF3$TreatmentStatus <- "Untreated"
SFF4$TreatmentStatus <- "Untreated"
SFF5$TreatmentStatus <- "Treated"
SFF6$TreatmentStatus <- "Untreated"
SFF8$TreatmentStatus <- "Treated"
SFF9$TreatmentStatus <- "Untreated"
SFF10$TreatmentStatus <- "Treated"
#Add plot size
SFS4$PlotSize <- 1
BTN4$PlotSize <- 1
SFF1$PlotSize <- 0.25
SFF2$PlotSize <- 1
SFF3$PlotSize <- 0.25
SFF4$PlotSize <- 0.25
SFF5$PlotSize <- 0.25
SFF6$PlotSize <- 0.25
SFF8$PlotSize <- 1
SFF9$PlotSize <- 0.25
SFF10$PlotSize <- 0.25
#Select columns of interest (I'm begging someone to write a loop, this is so embarrasing)
SFS4 <- SFS4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
BTN4 <- BTN4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF1 <- SFF1 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF2 <- SFF2 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF3 <- SFF3 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF4 <- SFF4 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF5 <- SFF5 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG,  Notes)
SFF6 <- SFF6 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF8 <- SFF8 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
SFF9 <- SFF9 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG,  Notes)
SFF10 <- SFF10 %>%
select(PlotName, PlotSize, TreatmentStatus, Tree_num, Species, Condition, DBH, OG, Notes)
#Okay well, now we merge all the plots into one dataframe
SFS4$Condition <- as.numeric(SFS4$Condition)
merged_plots <- bind_rows(SFS4, BTN4, SFF1, SFF2, SFF3, SFF4, SFF5, SFF6, SFF8, SFF9, SFF10)
#Now we add a column to define MOG as Y or NA
merged_plots <- merged_plots %>%
mutate(MOG = case_when(OG == "Y" | DBH > 30 ~ "Y"))
#calculate tree counts
merged_summary <- merged_plots %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(Tree_count = n(), meanDBH = mean(DBH, na.rm = TRUE))
#calculate MOG stats
merged_MOG <- merged_plots %>%
filter(MOG == "Y")%>%
group_by(PlotName, PlotSize, TreatmentStatus)%>%
summarize(MOG_count = n())
#calculate live MOG stats
merged_MOG_live <- merged_plots %>%
filter(MOG == "Y" & Condition != 5 & Condition != 2) %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(MOG_live_count = n())
#calculate OG stats
merged_OG <- merged_plots %>%
filter(OG == "Y") %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(OG_count = n())
#merge em all together.  probably a better way to do this, but here we are
merged_summary$MOG_count <- merged_MOG$MOG_count
merged_summary$MOG_live_count <- merged_MOG_live$MOG_live_count
merged_summary$OG_count <- merged_OG$OG_count
#Calculate TPH
merged_summary$TPH <- merged_summary$Tree_count/merged_summary$PlotSize
est_data<-merged_summary
MOGPHvsTPH<- melt(est_data[,c('PlotName','MOGperha','TPH')],id.vars = 1)
TreatedPlotName <- subset(est_data, TreatmentStatus == "Treated")$PlotName
TreatedMOG <- subset(est_data, TreatmentStatus == "Treated")$MOG_count
TreatedOG <- subset(est_data, TreatmentStatus == "Treated")$OG_count
Treated_MOG_OG <- data.frame(TreatedPlotName, TreatedMOG, TreatedOG)
## I'm not sure how this works but here's where I got the code from:
##https://stackoverflow.com/questions/10212106/creating-grouped-bar-plot-of-multi-column-data-in-r
T_MOG_OG <- melt(Treated_MOG_OG[,c('TreatedPlotName','TreatedOG','TreatedMOG')],id.vars = 1)
T_MOG_OG_Plot <- ggplot(T_MOG_OG, aes(x = TreatedPlotName, y = value)) +
geom_bar(aes(fill = variable), stat = "identity", color = 'black', position = "dodge") +
ggtitle("Treated") +
xlab("") +
ylab("Number of trees") +
ylim(0, 200) +
scale_fill_manual(values=c("#4d7358", "#9ed670")) +
theme_classic()
#scale_color_continuous(guide = guide_legend(override.aes = list(alpha = 0) ) ) +
#scale_linetype(guide = guide_legend(override.aes = list(alpha = 0) ) )+
#theme(legend.title = element_text(color = "transparent"),
#legend.text = element_text(color = "transparent"),
#legend.key = element_rect(fill = "transparent"))
## Need to find a way to remove the legend but keep same dimensions
##https://stackoverflow.com/questions/42438450/make-legend-invisible-but-keep-figure-dimensions-and-margins-the-same
UntreatedPlotName <- subset(est_data, TreatmentStatus == "Untreated")$PlotName
UntreatedMOG <- subset(est_data, TreatmentStatus == "Untreated")$MOG_count
UntreatedOG <- subset(est_data, TreatmentStatus == "Untreated")$OG_count
Untreated_MOG_OG <- data.frame(UntreatedPlotName, UntreatedMOG, UntreatedOG)
UnT_MOG_OG <- melt(Untreated_MOG_OG[,c('UntreatedPlotName','UntreatedOG','UntreatedMOG')],id.vars = 1)
UnT_MOG_OG_Plot <- ggplot(UnT_MOG_OG, aes(x = UntreatedPlotName, y = value)) +
geom_bar(aes(fill = variable), stat = "identity", color = 'black', position = "dodge") +
ggtitle("Untreated") +
xlab("") +
ylab("Number of trees") +
ylim(0, 200) +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('Old Growth', 'Mature Old Growth')) +
theme_classic() +
theme(legend.title = element_blank())
grid.arrange(T_MOG_OG_Plot, UnT_MOG_OG_Plot, ncol=1)
MOGPHvsTPH<- melt(est_data[,c('PlotName','MOGperha','TPH')],id.vars = 1)
TreatedMOGperha <- sum(subset(est_data, TreatmentStatus == 'Treated')$MOGperha)
UntreatedMOGperha <- sum(subset(est_data, TreatmentStatus == 'Untreated')$MOGperha)
NumMOGperha <- c(TreatedMOGperha, UntreatedMOGperha)
NumMOGperhaByTreatment <- data.frame(Treatment, NumMOGperha)
ggplot(NumMOGperhaByTreatment, aes(x = Treatment, y = NumMOGperha)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
xlab("") +
ylab("Mature old growth per hectare") +
ylim(0, 1000) +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
MOGPHvsTPH<- melt(est_data[,c('PlotName','MOGperha','TPH')],id.vars = 1)
MOGperHectare <- est_data$MOG_count / est_data$PlotSize
est_data$MOGperha <- MOGperHectare
MOGPHvsTPH<- melt(est_data[,c('PlotName','MOGperha','TPH')],id.vars = 1)
MOGPHvsTPH$variable <- factor(MOGPHvsTPH$variable, levels=c("TPH", "MOGperha"))
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("Plot") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('All trees', 'MOG')) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(merged_plots, aes(x=Species, fill = Species)) +
geom_bar(stat = "count")+
#scale_fill_identity()+
scale_fill_manual(values = c("ABCO" = "#4EDFC7",
"ACGL" = "#C21E56",
"JUMO" = "#FFC0CB",
"JUSC" = "#95658B",
"PIED" = "#FFD700",
"PIPO" = "#2E8B57",
"PIST" = "#89CFF0",
"PRVI" = "#9F2B68",
"PSME" = "#5D3FD3",
"QUGA" = "#CC5500",
"QUUN" = "#E3963E",
"SASC" = "#AFE1AF",
"unknown"= "#808080" ,
"NA" = "#808080" ))+
facet_wrap(~PlotName)+
xlab("") +
theme_minimal()+
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(merged_plots, aes(x=Species, fill = Species)) +
geom_bar(stat = "count" )+
#scale_fill_identity()+
scale_fill_manual(values = c("ABCO" = "#4EDFC7",
"ACGL" = "#C21E56",
"JUMO" = "#FFC0CB",
"JUSC" = "#95658B",
"PIED" = "#FFD700",
"PIPO" = "#2E8B57",
"PIST" = "#89CFF0",
"PRVI" = "#9F2B68",
"PSME" = "#5D3FD3",
"QUGA" = "#CC5500",
"QUUN" = "#E3963E",
"SASC" = "#AFE1AF",
"unknown"= "#808080" ,
"NA" = "#808080" ))+
facet_wrap(~PlotName)+
theme_minimal()+
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
ggplot(merged_plots, aes(x=Species, fill = color)) +
geom_bar(stat = "count" )+
scale_fill_identity()+
facet_wrap(~PlotName)+
theme_minimal()+
theme(axis.text.x=element_text(angle = 90, vjust = 0.5), axis.ticks.x=element_blank())+
theme(legend.text = element_text(size=15), legend.title =element_blank(), legend.position = c(0.9, 0.9), legend.key.size = unit(0.4, 'in'))
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("Plot") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#005b96", "#6497b1"), labels = c('All trees', 'MOG')) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("Plot") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#6497b1", "#005b96"), labels = c('All trees', 'MOG')) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("Plot") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#005b96", "#6497b1"), labels = c('All trees', 'MOG')) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = "fill", stat = "identity", color = "black") +
xlab("") +
ylab("Trees per ha") +
scale_fill_manual(values=c("#005b96", "#6497b1"), labels = c('All trees', 'MOG')) +
theme_classic() +
theme(legend.title = element_blank())
