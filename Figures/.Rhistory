group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(MOG_live_count = n())
#calculate OG stats
merged_OG <- merged_plots %>%
filter(OG == "Y") %>%
group_by(PlotName, PlotSize, TreatmentStatus) %>%
summarize(OG_count = n())
#merge em all together.  probably a better way to do this, but here we are
merged_summary$MOG_count <- merged_MOG$MOG_count
merged_summary$MOG_live_count <- merged_MOG_live$MOG_live_count
merged_summary$OG_count <- merged_OG$OG_count
#Calculate TPH
merged_summary$TPH <- merged_summary$Tree_count/merged_summary$PlotSize
est_data<-merged_summary
###Okay, now for some treatment level stats
treatment_summary <- merged_summary %>%
group_by(TreatmentStatus)%>%
summarize(Tree_count = sum(Tree_count), MOG_count = sum(MOG_count), MOG_live_count = sum(MOG_live_count), Surveyed_ha = sum(PlotSize))
#Jonathan, see "treatment_summary" and "merged_summary" dataframes.  These will have the data you'll want to make figures!
#I updated some variable names to match your figure code, but you may have to change or calculate a few
#I think MOG and OG density is less important to visualize than MOG and OG numbers alone, since sample size is what we are interested in
# Note I added stats for live MOGs.  We will want to plot this data as this is also an important sample subset we're interested in (tracking MOG that have capacity to die later!)
---------------------------------------------------------------------------------------------------------------
## Plot-level Histograms & Other fun things Carolina is playing around with
#all trees by plot (species-color-coded)
ggplot(merged_plots, aes(x=DBH)) + geom_histogram()
## Plot-level Histograms & Other fun things Carolina is playing around with
#all trees by plot (species-color-coded)
ggplot(merged_plots, aes(x=DBH)) + geom_histogram()
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
geom_histogram(binwidth=2)+
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
geom_histogram(binwidth=2)+
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
#all trees by plot (species-color-coded)
# Change the width of bins
geom_histogram(binwidth=2)+
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
merged_plots$Condition <- as.factor(merged_plots$Condition)
#rename condition codes with words that make sense
merged_plots <- merged_plots %>%
mutate(Cond = case_when(Condition == 1 ~ "Live",
Condition == 2 | Condition == 5 | Condition == 6 ~ "Dead",
Condition == 3 | Condition == 4 | Condition == 7 ~ "DALB",
Condition == 8 | Condition == 9 | Condition == 10 | Condition == 11 ~"Missing"))
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
ggplot(merged_plots, aes(x=DBH, fill = Condition, color = Condition)) +
ggplot(merged_plots, aes(x=DBH, fill = Cond, color = Cond)) +
scale_fill_manual(values=c("#e8bb61", "#c7505c", "#8ccfa8", "#56B4E9"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
#all trees by plot (live vs. dead)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Condition, color = Condition)) +
ggplot(merged_plots, aes(x=DBH, fill = Cond, color = Cond)) +
scale_fill_manual(values=c("#e8bb61", "#c7505c", "#8ccfa8", "#56B4E9"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
#all trees by plot (live vs. dead)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Cond, color = Cond)) +
scale_fill_manual(values=c("#e8bb61", "#c7505c", "#8ccfa8", "#56B4E9"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB","#4EDFC7", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = 'stack', stat = "identity") +
xlab("Plot") +
ylab("Trees per ha") +
ylim(0, 2000) +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('MOG', 'All trees')) +
theme_classic() +
theme(legend.title = element_blank())
## DATA BY PLOT
## Makes a graph of total area per plot
ggplot(est_data, aes(x= reorder(PlotName, PlotSize), y= PlotSize)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Total area (ha)") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(est_data, aes(x= reorder(PlotName, Tree_count), y= Tree_count)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Number of trees") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.title = element_blank())
## Makes a graph showing the number of MOG sampled per plot
ggplot(est_data, aes(x= reorder(PlotName, MOG_count), y= MOG_count)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Number of mature old growth") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(est_data, aes(x= reorder(PlotName, MOG_live_count), y= MOG_live_count)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Number of live mature old growth") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(est_data, aes(x= reorder(PlotName, OG_count), y= OG_count)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Number of old growth") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
ylim(0,200) +
theme_classic() +
theme(legend.title = element_blank())
ggplot(est_data, aes(x= reorder(PlotName, MOGperha), y= MOGperha)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Mature old growth density (trees per ha)") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
ylim(0,200) +
theme_classic() +
theme(legend.title = element_blank())
MOGperHectare <- est_data$MOG_count / est_data$PlotSize
est_data$MOGperha <- MOGperHectare
ggplot(est_data, aes(x= reorder(PlotName, MOGperha), y= MOGperha)) +
geom_bar(stat="identity", color = 'black', aes(fill = TreatmentStatus)) +
xlab("Plot") +
ylab("Mature old growth density (trees per ha)") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
ylim(0,200) +
theme_classic() +
theme(legend.title = element_blank())
TreatedArea <- sum(subset(est_data, TreatmentStatus == 'Treated')$PlotSize)
UntreatedArea <- sum(subset(est_data, TreatmentStatus == 'Untreated')$PlotSize)
TotalArea <- c(TreatedArea, UntreatedArea)
Treatment <- c("Treated", "Untreated")
AreaByTreatment <- data.frame(Treatment, TotalArea)
ggplot(AreaByTreatment, aes(x = Treatment, y = TotalArea)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
ylab("Total area") +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
TreatedNumTrees <- sum(subset(est_data, TreatmentStatus == 'Treated')$Tree_count)
UntreatedNumTrees <- sum(subset(est_data, TreatmentStatus == 'Untreated')$Tree_count)
NumTrees <- c(TreatedNumTrees, UntreatedNumTrees)
NumTreesByTreatment <- data.frame(Treatment, NumTrees)
ggplot(NumTreesByTreatment, aes(x = Treatment, y = NumTrees)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
ylab("Number of trees") +
ylim(0, 4000) +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
TreatedMOG <- sum(subset(est_data, TreatmentStatus == 'Treated')$MOG_count)
UntreatedMOG <- sum(subset(est_data, TreatmentStatus == 'Untreated')$MOG_count)
NumMOG <- c(TreatedMOG, UntreatedMOG)
NumMOGByTreatment <- data.frame(Treatment, NumMOG)
ggplot(NumMOGByTreatment, aes(x = Treatment, y = NumMOG)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
ylab("Number of mature old growth") +
ylim(0, 500) +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
TreatedLiveMOG <- sum(subset(est_data, TreatmentStatus == 'Treated')$MOG_live_count)
UntreatedLiveMOG <- sum(subset(est_data, TreatmentStatus == 'Untreated')$MOG_live_count)
NumLiveMOG <- c(TreatedLiveMOG, UntreatedLiveMOG)
NumLiveMOGbyTreatment <- data.frame(Treatment, NumLiveMOG)
ggplot(NumMOGByTreatment, aes(x = Treatment, y = NumLiveMOG)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
ylab("Number of live mature old growth") +
ylim(0, 400) +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
## Get number of OG's in the treated and untreated pots
## Then make a graph of the number of OG's per treatment
TreatedOG <- sum(subset(est_data, TreatmentStatus == 'Treated')$OG_count)
UntreatedOG <- sum(subset(est_data, TreatmentStatus == 'Untreated')$OG_count)
NumOG <- c(TreatedOG, UntreatedOG)
NumOGbyTreatment <- data.frame(Treatment, NumOG)
ggplot(NumMOGByTreatment, aes(x = Treatment, y = NumOG)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
ylab("Number of old growth") +
ylim(0, 300) +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
TreatedMOGperha <- sum(subset(est_data, TreatmentStatus == 'Treated')$MOGperha)
UntreatedMOGperha <- sum(subset(est_data, TreatmentStatus == 'Untreated')$MOGperha)
NumMOGperha <- c(TreatedMOGperha, UntreatedMOGperha)
NumMOGperhaByTreatment <- data.frame(Treatment, NumMOGperha)
ggplot(NumMOGperhaByTreatment, aes(x = Treatment, y = NumMOGperha)) +
geom_bar(stat = "identity", color = 'black', aes(fill = Treatment)) +
ylab("Mature old growth density") +
ylim(0, 1000) +
scale_fill_manual(values=c("#00aedb", "#d11141")) +
theme_classic() +
theme(legend.position = "none")
TreatedPlotName <- subset(est_data, TreatmentStatus == "Treated")$PlotName
TreatedMOG <- subset(est_data, TreatmentStatus == "Treated")$MOG_count
TreatedOG <- subset(est_data, TreatmentStatus == "Treated")$OG_count
Treated_MOG_OG <- data.frame(TreatedPlotName, TreatedMOG, TreatedOG)
## I'm not sure how this works but here's where I got the code from:
##https://stackoverflow.com/questions/10212106/creating-grouped-bar-plot-of-multi-column-data-in-r
T_MOG_OG <- melt(Treated_MOG_OG[,c('TreatedPlotName','TreatedOG','TreatedMOG')],id.vars = 1)
T_MOG_OG_Plot <- ggplot(T_MOG_OG, aes(x = TreatedPlotName, y = value)) +
geom_bar(aes(fill = variable), stat = "identity", color = 'black', position = "dodge") +
ggtitle("Treated") +
xlab("") +
ylab("Number of trees") +
ylim(0, 200) +
scale_fill_manual(values=c("#4d7358", "#9ed670")) +
theme_classic() +
scale_color_continuous(guide = guide_legend(override.aes = list(alpha = 0) ) ) +
scale_linetype(guide = guide_legend(override.aes = list(alpha = 0) ) )+
theme(legend.title = element_text(color = "transparent"),
legend.text = element_text(color = "transparent"),
legend.key = element_rect(fill = "transparent"))
## Need to find a way to remove the legend but keep same dimensions
##https://stackoverflow.com/questions/42438450/make-legend-invisible-but-keep-figure-dimensions-and-margins-the-same
UntreatedPlotName <- subset(est_data, TreatmentStatus == "Untreated")$PlotName
UntreatedMOG <- subset(est_data, TreatmentStatus == "Untreated")$MOG_count
UntreatedOG <- subset(est_data, TreatmentStatus == "Untreated")$OG_count
Untreated_MOG_OG <- data.frame(UntreatedPlotName, UntreatedMOG, UntreatedOG)
UnT_MOG_OG <- melt(Untreated_MOG_OG[,c('UntreatedPlotName','UntreatedOG','UntreatedMOG')],id.vars = 1)
UnT_MOG_OG_Plot <- ggplot(UnT_MOG_OG, aes(x = UntreatedPlotName, y = value)) +
geom_bar(aes(fill = variable), stat = "identity", color = 'black', position = "dodge") +
ggtitle("Untreated") +
xlab("") +
ylab("Number of trees") +
ylim(0, 200) +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('Old Growth', 'Mature Old Growth')) +
theme_classic() +
theme(legend.title = element_blank())
grid.arrange(T_MOG_OG_Plot, UnT_MOG_OG_Plot, ncol=1)
OG_MOG <- melt(est_data[,c('PlotName','OG_count','MOG_count')],id.vars = 1)
## Can you facet_wrap or facet_grid here???
ggplot(OG_MOG , aes(x = PlotName, y = value)) +
geom_bar(aes(fill = variable), stat = "identity", color = 'black', position = "dodge") +
xlab("Plot") +
ylab("Number of trees") +
ylim(0, 200) +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('Old Growth', 'Mature Old Growth')) +
theme_classic() +
theme(legend.title = element_blank())
MOGMinusOG <- est_data$MOG_count - est_data$OG_count
est_data$MOGMinusOG <- MOGMinusOG
OGvsMOGpart2 <- melt(est_data[,c('PlotName','OG_count','MOGMinusOG')],id.vars = 1)
ggplot(OGvsMOGpart2, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = 'stack', stat = "identity", color = "black") +
xlab("Plot") +
ylab("Number of trees") +
ylim(0, 300) +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('Mature Old Growth', 'Old Growth')) +
theme_classic() +
theme(legend.title = element_blank())
## MOG and TPH stacked bar graph
MOGPHvsTPH<- melt(est_data[,c('PlotName','MOGperha','TPH')],id.vars = 1)
ggplot(MOGPHvsTPH, aes(x = PlotName, y = value, fill = variable)) +
geom_bar(position = 'stack', stat = "identity") +
xlab("Plot") +
ylab("Trees per ha") +
ylim(0, 2000) +
scale_fill_manual(values=c("#4d7358", "#9ed670"), labels = c('MOG', 'All trees')) +
theme_classic() +
theme(legend.title = element_blank())
## Plot-level Histograms & Other fun things Carolina is playing around with
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#C3B1E1","#C21E56", "#FFC0CB", "#9F2B68", "#FFD700", "#2E8B57", "#89CFF0", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey")+)
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)
facet_wrap(~TreatmentStatus)+
theme(strip.text = element_text(size =15))+
theme_minimal()
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)+
theme(strip.text = element_text(size =15))+
theme_minimal()
#same but facet by treatment status
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species, color = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40","grey40", "grey40","grey40","grey40" ))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~PlotName)
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =15))
#all trees by plot (species-color-coded)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Species)) +
scale_fill_manual(values=c("#4EDFC7","#C21E56", "#FFC0CB","#95658B", "#FFD700", "#2E8B57", "#89CFF0","#9F2B68","grey", "#5D3FD3", "#CC5500", "#E3963E", "#AFE1AF", "grey","grey","grey"))+
#scale_color_manual(values = c("grey40","grey40","grey40","grey40" ,"grey40","grey40","grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=4)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus + PlotName + PlotSize, ncol = 5 )+
theme_minimal()+
theme(strip.text = element_text(size =8))
merged_plots$Condition <- as.factor(merged_plots$Condition)
#rename condition codes with words that make sense
merged_plots <- merged_plots %>%
mutate(Cond = case_when(Condition == 1 ~ "Live",
Condition == 2 | Condition == 5 | Condition == 6 ~ "Dead",
Condition == 3 | Condition == 4 | Condition == 7 ~ "DALB",
Condition == 8 | Condition == 9 | Condition == 10 | Condition == 11 ~"Missing"))
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
#all trees by plot (live vs. dead)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Cond, color = Cond)) +
scale_fill_manual(values=c("#e8bb61", "#c7505c", "#8ccfa8", "#56B4E9"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
#create condition plot faceted by treatment status with nice logical color scheme
merged_plots$Condition <- as.factor(merged_plots$Cond)
#all trees by plot (live vs. dead)
# Change the width of bins
ggplot(merged_plots, aes(x=DBH, fill = Cond, color = Cond)) +
scale_fill_manual(values=c("#e8bb61", "#c7505c", "#8ccfa8", "#56B4E9"))+
scale_color_manual(values = c("grey40","grey40","grey40","grey40"))+
geom_histogram(binwidth=2)+
xlab("DBH (cm)")+
facet_wrap(~TreatmentStatus)+
theme_minimal()+
theme(strip.text = element_text(size =15))
